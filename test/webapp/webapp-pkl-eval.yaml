Description: 'Creates a web application with a static website using S3 and CloudFront, an API Gateway REST API, and a DynamoDB table, with Cognito authentication. This sample uses Rain Metadata commands to upload content to the static  site bucket, and uses a Run property on the S3 directive to build the  lambda function, which for this example is written in Go. Apache-2.0 License. Adapt this template to your needs and thoruoughly test it before introducing it in a production environment. **WARNING** This template will create resources in your account that may incur billing charges. '
AWSTemplateFormatVersion: 2010-09-09
Parameters:
  AppName:
    Type: String
    Default: rain-webapp
    Description: This name is used as a prefix for resource names
Resources:
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      AutoVerifiedAttributes:
      - email
      Schema:
      - Name: email
        Required: true
      - Name: given_name
        Required: true
      - Name: family_name
        Required: true
      UserPoolName:
        Fn::Sub: AppName
    DependsOn:
    - SiteDistribution
  CognitoDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain:
        Fn::Sub: AppName
      UserPoolId:
        Ref: UserPool
  CognitoClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AllowedOAuthFlows:
      - code
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
      - phone
      - email
      - openid
      CallbackURLs:
      - Ref: CallbackURL
      ClientName:
        Fn::Sub: AppName
      GenerateSecret: false
      SupportedIdentityProviders:
      - COGNITO
      UserPoolId:
        Ref: UserPool
  SiteOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name:
          Fn::Join:
          - ''
          - Fn::Sub: ${AppName}
          - Fn::Select:
            - 2
            - Fn::Split:
              - /
              - Ref: AWS::StackId
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
  SiteDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          Compress: true
          TargetOriginId:
            Fn::Sub: ${AppName}-origin-1
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Logging:
          Bucket:
            Fn::GetAtt:
            - CloudFrontLogsBucket
            - RegionalDomainName
        Origins:
        - DomainName:
            Fn::GetAtt:
            - ContentBucket
            - RegionalDomainName
          Id:
            Fn::Sub: ${AppName}-origin-1
          OriginAccessControlId:
            Fn::GetAtt:
            - OriginAccessControl
            - Id
          S3OriginConfig:
            OriginAccessIdentity: ''
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        WebACLId:
          Fn::GetAtt:
          - WebACL
          - Arn
    Metadata:
      checkov:
        skip:
        - id: CKV_AWS_174
          comment: Using the default cloudfront certificate with no aliases
      guard:
        SuppressedRules:
        - CLOUDFRONT_CUSTOM_SSL_CERTIFICATE
        - CLOUDFRONT_ORIGIN_FAILOVER_ENABLED
        - CLOUDFRONT_SNI_ENABLED
  SiteWebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      DefaultAction:
        Allow: {}
      Description: Web ACL with AWS Managed Rules
      Name: WebACLWithAMR
      Rules:
      - Name: AWS-AWSManagedRulesCommonRuleSet
        OverrideAction:
          None: {}
        Priority: 0
        Statement:
          ManagedRuleGroupStatement:
            ExcludedRules:
            - Name: NoUserAgent_HEADER
            Name: AWSManagedRulesCommonRuleSet
            VendorName: AWS
        VisibilityConfig:
          CloudWatchMetricsEnabled: true
          MetricName: MetricForAMRCRS
          SampledRequestsEnabled: true
      Scope: CLOUDFRONT
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AppName}
      VisibilityConfig:
        CloudWatchMetricsEnabled: true
        MetricName: MetricForWebACLWithAMR
        SampledRequestsEnabled: true
  SiteContentBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: ${AppName}-${AWS::Region}-${AWS::AccountId}
      PolicyDocument:
        Statement:
        - Action: s3:*
          Condition:
            Bool:
              aws:SecureTransport: false
          Effect: Deny
          Principal:
            AWS: '*'
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-${AWS::Region}-${AWS::AccountId}
          - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-${AWS::Region}-${AWS::AccountId}/*
        - Action: s3:PutObject
          Condition:
            ArnLike:
              aws:SourceArn:
              - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-${AWS::Region}-${AWS::AccountId}
            StringEquals:
              aws:SourceAccount:
              - Ref: AWS::AccountId
          Effect: Allow
          Principal:
            Service: logging.s3.amazonaws.com
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-${AWS::Region}-${AWS::AccountId}/*
        Version: 2012-10-17
        Statement:
        - Action: s3:GetObject
          Effect: Allow
          Resource:
            Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-${AWS::Region}-${AWS::AccountId}/*
          Principal:
            Service: cloudfront.amazonaws.com
          Condition:
            StringEquals:
              AWS:SourceArn:
                Fn::Sub: arn:aws:cloudfront::${AWS::AccountId}:distribution/${Distribution.Id}
        - Action: s3:*
          Condition:
            Bool:
              aws:SecureTransport: false
          Effect: Deny
          Principal:
            AWS: '*'
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-${AWS::Region}-${AWS::AccountId}
          - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-${AWS::Region}-${AWS::AccountId}/*
        - Action: s3:PutObject
          Condition:
            ArnLike:
              aws:SourceArn:
                Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-${AWS::Region}-${AWS::AccountId}
            StringEquals:
              aws:SourceAccount:
                Ref: AWS::AccountId
          Effect: Allow
          Principal:
            Service: logging.s3.amazonaws.com
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-${AWS::Region}-${AWS::AccountId}/*
        Version: 2012-10-17
  SiteContentLogBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: ${AppName}-logs-${AWS::Region}-${AWS::AccountId}
      PolicyDocument:
        Statement:
        - Action: s3:*
          Condition:
            Bool:
              aws:SecureTransport: false
          Effect: Deny
          Principal:
            AWS: '*'
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-logs-${AWS::Region}-${AWS::AccountId}
          - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-logs-${AWS::Region}-${AWS::AccountId}/*
        - Action: s3:PutObject
          Condition:
            ArnLike:
              aws:SourceArn:
              - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-logs-${AWS::Region}-${AWS::AccountId}
            StringEquals:
              aws:SourceAccount:
              - Ref: AWS::AccountId
          Effect: Allow
          Principal:
            Service: logging.s3.amazonaws.com
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-logs-${AWS::Region}-${AWS::AccountId}/*
        Version: 2012-10-17
  SiteContentReplicaBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: ${AppName}-replicas-${AWS::Region}-${AWS::AccountId}
      PolicyDocument:
        Statement:
        - Action: s3:*
          Condition:
            Bool:
              aws:SecureTransport: false
          Effect: Deny
          Principal:
            AWS: '*'
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-replicas-${AWS::Region}-${AWS::AccountId}
          - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-replicas-${AWS::Region}-${AWS::AccountId}/*
        - Action: s3:PutObject
          Condition:
            ArnLike:
              aws:SourceArn:
              - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-replicas-${AWS::Region}-${AWS::AccountId}
            StringEquals:
              aws:SourceAccount:
              - Ref: AWS::AccountId
          Effect: Allow
          Principal:
            Service: logging.s3.amazonaws.com
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-replicas-${AWS::Region}-${AWS::AccountId}/*
        Version: 2012-10-17
  SiteContentLogBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      BucketName:
        Fn::Sub: ${AppName}-logs-${AWS::Region}-${AWS::AccountId}
      ObjectLockConfiguration:
        ObjectLockEnabled: Enabled
        Rule:
          DefaultRetention:
            Mode: COMPLIANCE
            Years: 1
      ObjectLockEnabled: true
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
    Metadata:
      Comment: This bucket records access logs for the main bucket
      checkov:
        skip:
        - comment: This is the log bucket
          id: CKV_AWS_18
      guard:
        SuppressedRules:
        - S3_BUCKET_LOGGING_ENABLED
        - S3_BUCKET_REPLICATION_ENABLED
      Rain:
        Content: RAIN_NO_CONTENT
        EmptyOnDelete:
          Ref: EmptyOnDelete
  SiteContentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      BucketName:
        Fn::Sub: ${AppName}-${AWS::Region}-${AWS::AccountId}
      LoggingConfiguration:
        DestinationBucketName:
          Ref: LogBucket
      ObjectLockEnabled: false
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      ReplicationConfiguration:
        Role:
          Fn::GetAtt:
          - ReplicationRole
          - Arn
        Rules:
        - Destination:
            Bucket:
              Fn::GetAtt:
              - ReplicaBucket
              - Arn
          Status: Enabled
      VersioningConfiguration:
        Status: Enabled
    Metadata:
      guard:
        SuppressedRules:
        - S3_BUCKET_DEFAULT_LOCK_ENABLED
      Rain:
        Content: site/dist
        EmptyOnDelete: true
        DistributionLogicalId: SiteDistribution
        Version: 2
        RunBefore:
          Command: buildsite.sh
        RunAfter:
          Command: buildsite.sh
          Args:
          - Rain::OutputValue RestApiInvokeURL
          - Rain::OutputValue RedirectURI
          - Rain::OutputValue AppName
          - Rain::OutputValue AppClientId
  SiteContentReplicaBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      BucketName:
        Fn::Sub: ${AppName}-replicas-${AWS::Region}-${AWS::AccountId}
      ObjectLockEnabled: false
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
    Metadata:
      Comment: This bucket is used as a target for replicas from the main bucket
      checkov:
        skip:
        - comment: This is the replica bucket
          id: CKV_AWS_18
      guard:
        SuppressedRules:
        - S3_BUCKET_DEFAULT_LOCK_ENABLED
        - S3_BUCKET_REPLICATION_ENABLED
        - S3_BUCKET_LOGGING_ENABLED
      Rain:
        Content: RAIN_NO_CONTENT
        EmptyOnDelete:
          Ref: EmptyOnDelete
  SiteContentReplicationPolicy:
    Type: AWS::IAM::RolePolicy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - s3:GetReplicationConfiguration
          - s3:ListBucket
          Effect: Allow
          Resource:
            Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-${AWS::Region}-${AWS::AccountId}
        - Action:
          - s3:GetObjectVersionForReplication
          - s3:GetObjectVersionAcl
          - s3:GetObjectVersionTagging
          Effect: Allow
          Resource:
            Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-${AWS::Region}-${AWS::AccountId}/*
        - Action:
          - s3:ReplicateObject
          - s3:ReplicateDelete
          - s3:ReplicationTags
          Effect: Allow
          Resource:
            Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-replicas-${AWS::Region}-${AWS::AccountId}/*
        Version: 2012-10-17
      PolicyName: bucket-replication-policy
      RoleName:
        Ref: ReplicationRole
  SiteContentReplicationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - s3.amazonaws.com
        Version: 2012-10-17
      Path: /
  SiteCloudFrontLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: ${AppName}-${AWS::Region}-${AWS::AccountId}
      PolicyDocument:
        Statement:
        - Action: s3:*
          Condition:
            Bool:
              aws:SecureTransport: false
          Effect: Deny
          Principal:
            AWS: '*'
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-${AWS::Region}-${AWS::AccountId}
          - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-${AWS::Region}-${AWS::AccountId}/*
        - Action: s3:PutObject
          Condition:
            ArnLike:
              aws:SourceArn:
              - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-${AWS::Region}-${AWS::AccountId}
            StringEquals:
              aws:SourceAccount:
              - Ref: AWS::AccountId
          Effect: Allow
          Principal:
            Service: logging.s3.amazonaws.com
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-${AWS::Region}-${AWS::AccountId}/*
        Version: 2012-10-17
  SiteCloudFrontLogsLogBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: ${AppName}-logs-${AWS::Region}-${AWS::AccountId}
      PolicyDocument:
        Statement:
        - Action: s3:*
          Condition:
            Bool:
              aws:SecureTransport: false
          Effect: Deny
          Principal:
            AWS: '*'
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-logs-${AWS::Region}-${AWS::AccountId}
          - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-logs-${AWS::Region}-${AWS::AccountId}/*
        - Action: s3:PutObject
          Condition:
            ArnLike:
              aws:SourceArn:
              - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-logs-${AWS::Region}-${AWS::AccountId}
            StringEquals:
              aws:SourceAccount:
              - Ref: AWS::AccountId
          Effect: Allow
          Principal:
            Service: logging.s3.amazonaws.com
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-logs-${AWS::Region}-${AWS::AccountId}/*
        Version: 2012-10-17
  SiteCloudFrontLogsReplicaBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: ${AppName}-replicas-${AWS::Region}-${AWS::AccountId}
      PolicyDocument:
        Statement:
        - Action: s3:*
          Condition:
            Bool:
              aws:SecureTransport: false
          Effect: Deny
          Principal:
            AWS: '*'
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-replicas-${AWS::Region}-${AWS::AccountId}
          - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-replicas-${AWS::Region}-${AWS::AccountId}/*
        - Action: s3:PutObject
          Condition:
            ArnLike:
              aws:SourceArn:
              - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-replicas-${AWS::Region}-${AWS::AccountId}
            StringEquals:
              aws:SourceAccount:
              - Ref: AWS::AccountId
          Effect: Allow
          Principal:
            Service: logging.s3.amazonaws.com
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-replicas-${AWS::Region}-${AWS::AccountId}/*
        Version: 2012-10-17
  SiteCloudFrontLogsLogBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      BucketName:
        Fn::Sub: ${AppName}-cflogs-logs-${AWS::Region}-${AWS::AccountId}
      ObjectLockConfiguration:
        ObjectLockEnabled: Enabled
        Rule:
          DefaultRetention:
            Mode: COMPLIANCE
            Years: 1
      ObjectLockEnabled: true
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
    Metadata:
      Comment: This bucket records access logs for the main bucket
      checkov:
        skip:
        - comment: This is the log bucket
          id: CKV_AWS_18
      guard:
        SuppressedRules:
        - S3_BUCKET_LOGGING_ENABLED
        - S3_BUCKET_REPLICATION_ENABLED
      Rain:
        Content: RAIN_NO_CONTENT
        EmptyOnDelete:
          Ref: EmptyOnDelete
  SiteCloudFrontLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      BucketName:
        Fn::Sub: ${AppName}-cflogs-${AWS::Region}-${AWS::AccountId}
      LoggingConfiguration:
        DestinationBucketName:
          Ref: LogBucket
      ObjectLockEnabled: false
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      ReplicationConfiguration:
        Role:
          Fn::GetAtt:
          - ReplicationRole
          - Arn
        Rules:
        - Destination:
            Bucket:
              Fn::GetAtt:
              - ReplicaBucket
              - Arn
          Status: Enabled
      VersioningConfiguration:
        Status: Enabled
    Metadata:
      guard:
        SuppressedRules:
        - S3_BUCKET_DEFAULT_LOCK_ENABLED
      Rain:
        Content:
          Ref: Content
        EmptyOnDelete:
          Ref: EmptyOnDelete
        DistributionLogicalId: NONE
  SiteCloudFrontLogsReplicaBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      BucketName:
        Fn::Sub: ${AppName}-cflogs-replicas-${AWS::Region}-${AWS::AccountId}
      ObjectLockEnabled: false
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
    Metadata:
      Comment: This bucket is used as a target for replicas from the main bucket
      checkov:
        skip:
        - comment: This is the replica bucket
          id: CKV_AWS_18
      guard:
        SuppressedRules:
        - S3_BUCKET_DEFAULT_LOCK_ENABLED
        - S3_BUCKET_REPLICATION_ENABLED
        - S3_BUCKET_LOGGING_ENABLED
      Rain:
        Content: RAIN_NO_CONTENT
        EmptyOnDelete:
          Ref: EmptyOnDelete
  SiteCloudFrontLogsReplicationPolicy:
    Type: AWS::IAM::RolePolicy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - s3:GetReplicationConfiguration
          - s3:ListBucket
          Effect: Allow
          Resource:
            Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-cflogs-${AWS::Region}-${AWS::AccountId}
        - Action:
          - s3:GetObjectVersionForReplication
          - s3:GetObjectVersionAcl
          - s3:GetObjectVersionTagging
          Effect: Allow
          Resource:
            Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-cflogs-${AWS::Region}-${AWS::AccountId}/*
        - Action:
          - s3:ReplicateObject
          - s3:ReplicateDelete
          - s3:ReplicationTags
          Effect: Allow
          Resource:
            Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-cflogs-replicas-${AWS::Region}-${AWS::AccountId}/*
        Version: 2012-10-17
      PolicyName: bucket-replication-policy
      RoleName:
        Ref: ReplicationRole
  SiteCloudFrontLogsReplicationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - s3.amazonaws.com
        Version: 2012-10-17
      Path: /
  TestTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      TableName:
        Fn::Sub: ${AppName}-test
Outputs:
  SiteURL:
    Value:
      Fn::Sub: https://${SiteDistribution.DomainName}
  RedirectURI:
    Value:
      Fn::Sub: https://${SiteDistribution.DomainName}/index.html
  AppName:
    Value:
      Ref: AppName
  RestApiInvokeURL:
    Value:
      Fn::Sub: https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${RestApiStage}
  AppClientId:
    Value:
      Ref: CognitoClient
  CognitoDomainPrefix:
    Value:
      Ref: AppName
