amends "@cfn/template.pkl"
import "./pkl/api-resource.pkl" as apiresource
import "./pkl/cognito.pkl"
import "./pkl/rest-api.pkl" as restapi
import "./pkl/static-site.pkl" as staticsite
import "@cfn/aws/iam/rolepolicy.pkl"
import "@cfn/aws/dynamodb/table.pkl"
import "@cfn/cloudformation.pkl" as cfn

Description = "Creates a web application with a static website using S3 and CloudFront, an API Gateway REST API, and a DynamoDB table, with Cognito authentication. This sample uses Rain Metadata commands to upload content to the static  site bucket, and uses a Run property on the S3 directive to build the  lambda function, which for this example is written in Go. Apache-2.0 License. Adapt this template to your needs and thoruoughly test it before introducing it in a production environment. **WARNING** This template will create resources in your account that may incur billing charges. "

Parameters {
  ["AppName"] {
    Type = "String"
    Description = "This name is used as a prefix for resource names"
    Default = "rain-webapp"
  }
}

local staticSite = new staticsite {
  AppName = "${AppName}"
  LogicalId = "Site"
}

local cognitoAuth = new cognito {
  AppName = "${AppName}"
  LogicalId = "Cognito"
  CallbackURL = cfn.Sub("https://${SiteDistribution.DomainName}/index.html")
}

local restApi = new restapi {
  AppName = "${AppName}"
  UserPoolArn = "${CognitoUserPool.Arn}"
  StageName = "prod"
  LogicalId = "Rest"
}

local testResource = new apiresource {
  Name = "${AppName}-test"
  LogicalId = "Test"
  RestApi = "${RestApi}"
  RootResourceId = "${RestApi.RootResourceId}"
  RestApiDeployment = "${RestApiDeployment}"
  BuildScript = "../webapp/buildapi.sh"
  CodePath = "../webapp/api/dist/test/lambda-handler.zip"
  ResourcePath = "test"
  AuthorizerId = "${RestApiAuthorizer}"
}

local jwtResource = new apiresource {
  Name = "${AppName}-jwt"
  LogicalId = "Jwt"
  RestApi = "${RestApi}"
  RootResourceId = "${RestApi.RootResourceId}"
  RestApiDeployment = "${RestApiDeployment}"
  BuildScript = "../webapp/buildapi.sh"
  CodePath = "../webapp/api/dist/jwt/lambda-handler.zip"
  ResourcePath = "test"
  AuthorizerId = "AWS::NoValue"
}

Resources {

  for (logicalId, resource in testResource.Resources) {
    when (logicalId == "TestHandler") {
      [logicalId] = (resource) {
        Properties {
          ["Environment"] {
            ["Variables"] {
              ["TABLE_NAME"] {
                ["Ref"] = "TestTable"
              }
            }
          }
        }
      }
    } else {
      [logicalId] = resource
    }
  }

  for (logicalId, resource in jwtResource.Resources) {
    when (logicalId == "JwtHandler") {
      [logicalId] = (resource) {
        Properties {
          ["Environment"] {
            ["Variables"] {
              ["COGNITO_REGION"] = "us-east-1"
              ["COGNITO_POOL_ID"] {
                ["Ref"] = "CognitoUserPool"
              }
              ["COGNITO_REDIRECT_URI"] {
                ["Fn::Sub"] = "https://${SiteDistribution.DomainName}/index.html"
              }
              ["COGNITO_DOMAIN_PREFIX"] {
                ["Ref"] = "AppName"
              }
              ["COGNITO_APP_CLIENT_ID"] {
                ["Ref"] = "CognitoClient"
              }
            }
          }
        }
      }
    }
    when (logicalId == "JwtGet") {
      [logicalId] = (resource) {
        Properties {
          ["AuthorizationType"] = "NONE"
        }
      }
    } 
    when (logicalId != "JwtHandler" && logicalId != "JwtGet") {
      [logicalId] = resource
    }
  }

  ["TestResourceHandlerPolicy"] = new rolepolicy.RolePolicy {
    PolicyDocument {
      Statement {
        new {
          Action {
            "dynamodb:BatchGetItem"
            "dynamodb:GetItem"
            "dynamodb:Query"
            "dynamodb:Scan"
            "dynamodb:BatchWriteItem"
            "dynamodb:PutItem"
            "dynamodb:UpdateItem"
          }
          Effect = "Allow"
          Resource {
            cfn.GetAtt("TestTable", "Arn")
          }
        }
      }
    }
    PolicyName = "handler-policy"
    RoleName = cfn.Ref("TestResourceHandlerRole")
  }

  for (logicalId, resource in restApi.Resources) {
    when (logicalId == "ApiDeployment") {
      [logicalId] = (resource) {
        Metadata {
          ["Version"] = 2
        }
        DependsOn {
          "TestResourceGet"
          "TestResourceOptions"
          "JwtResourceGet"
          "JwtResourceOptions"
        }
      }
    } else {
      [logicalId] = resource
    }
  }

  for (logicalId, resource in cognitoAuth.Resources) {
    when (logicalId == "CognitoUserPool") {
      [logicalId] = (resource) {
        DependsOn = new {
          "SiteDistribution"
        }
      }
    } else {
      [logicalId] = resource
    }
  }

  // Add resources from the static site module and override the content bucket to add Rain metadata
  for (logicalId, resource in staticSite.Resources) {
    when (logicalId == "SiteContentBucket") {
      [logicalId] = (resource) {
        Metadata {
          ["Rain"] {
            ["EmptyOnDelete"] = true
            ["Content"] = "site/dist"
            ["Version"] = 2
            ["DistributionLogicalId"] = "SiteDistribution"
            ["RunBefore"] {
              ["Command"] = "buildsite.sh"
            }
            ["RunAfter"] {
              ["Command"] = "buildsite.sh"
              ["Args"] {
                "Rain::OutputValue RestApiInvokeURL"
                "Rain::OutputValue RedirectURI"
                "Rain::OutputValue AppName"
                "Rain::OutputValue AppClientId"
              }
            }
          }
        }
      }
    } else {
      [logicalId] = resource
    }
  }

  ["TestTable"] = new table.Table {
    BillingMode = "PAY_PER_REQUEST"
    TableName = cfn.Sub("${AppName}-test")

    AttributeDefinitions {
      new {
        AttributeName = "id"
        AttributeType = "S"
      }
    }
    KeySchema {
      new {
        AttributeName = "id"
        KeyType = "HASH"
      }
    }
  }
}

Outputs {
  ["SiteURL"] = new cfn.Output {
    Value = cfn.Sub("https://${SiteDistribution.DomainName}")
  }
  ["RedirectURI"] = new cfn.Output {
    Value = cfn.Sub("https://${SiteDistribution.DomainName}/index.html")
  }
  ["AppName"] = new cfn.Output {
    Value = cfn.Ref("AppName")
  }
  ["RestApiInvokeURL"] = new cfn.Output {
    Value = cfn.Sub("https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${RestApiStage}")
  }
  ["AppClientId"] = new cfn.Output {
    Value = cfn.Ref("CognitoClient")
  }
  ["CognitoDomainPrefix"] = new cfn.Output {
    Value = cfn.Ref("AppName")
  }
}
