amends "@cfn/template.pkl"
import "@cfn/aws/dynamodb/table.pkl"
import "@cfn/aws/iam/rolepolicy.pkl"
import "@cfn/cloudformation.pkl" as cfn
import "./pkl/static-site.pkl" as staticsite

Description = "Creates a web application with a static website using S3 and CloudFront, an API Gateway REST API, and a DynamoDB table, with Cognito authentication. This sample uses Rain Metadata commands to upload content to the static  site bucket, and uses a Run property on the S3 directive to build the  lambda function, which for this example is written in Go. Apache-2.0 License. Adapt this template to your needs and thoruoughly test it before introducing it in a production environment. **WARNING** This template will create resources in your account that may incur billing charges. "

Parameters {
  ["AppName"] {
    Type = "String"
    Description = "This name is used as a prefix for resource names"
    Default = "rain-webapp"
  }
}

local staticSite = new staticsite {
    AppName = cfn.Ref("AppName")
    LogicalId = "Site"
}

Resources {

  // Add resources from the static site module and override the content bucket to add Rain metadata
  for (logicalId, resource in staticSite.Resources) {
    when (logicalId == "SiteContentBucket") {
      [logicalId] = (resource) {
        Metadata {
          ["Rain"] {
            ["EmptyOnDelete"] = true
            ["Content"] = "site/dist"
            ["Version"] = 2
            ["DistributionLogicalId"] = "SiteDistribution"
            ["RunBefore"] {
              ["Command"] = "buildsite.sh"
            }
            ["RunAfter"] {
              ["Command"] = "buildsite.sh"
              ["Args"] {
                "Rain::OutputValue RestApiInvokeURL"
                "Rain::OutputValue RedirectURI"
                "Rain::OutputValue AppName"
                "Rain::OutputValue AppClientId"
              }
            }
          }
        }
      }
    } else {
      [logicalId] = resource
    }
  }


  ["TestTable"] = new table.Table {
    BillingMode = "PAY_PER_REQUEST"
    TableName = cfn.Sub("${AppName}-test")

    AttributeDefinitions {
      new {
        AttributeName = "id"
        AttributeType = "S"
      }
    }
    KeySchema {
      new {
        AttributeName = "id"
        KeyType = "HASH"
      }
    }
  }

}

Outputs {
  ["SiteURL"] = new cfn.Output {
    Value = cfn.Sub("https://${SiteDistribution.DomainName}")
  }
  ["RedirectURI"] = new cfn.Output {
    Value = cfn.Sub("https://${SiteDistribution.DomainName}/index.html")
  }
  ["AppName"] = new cfn.Output {
    Value = cfn.Ref("AppName")
  }
  ["RestApiInvokeURL"] = new cfn.Output {
    Value = cfn.Sub("https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${RestApiStage}")
  }
  ["AppClientId"] = new cfn.Output {
    Value = cfn.Ref("CognitoClient")
  }
  ["CognitoDomainPrefix"] = new cfn.Output {
    Value = cfn.Ref("AppName")
  }
}
