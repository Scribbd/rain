Description: |
  Creates a web application with a static website using S3 and CloudFront, 
  an API Gateway REST API, and a DynamoDB table, with Cognito authentication.
  This sample uses Rain Metadata commands to upload content to the static 
  site bucket, and uses a Run property on the S3 directive to build the 
  lambda function, which for this example is written in Go.
  Apache-2.0 License. Adapt this template to your needs and thoruoughly test
  it before introducing it in a production environment. **WARNING** This
  template will create resources in your account that may incur billing
  charges.

Parameters:

  AppName:
    Type: String
    Description: This name is used as a prefix for resource names
    Default: rain-webapp

Resources:

  Site:
    Type: !Rain::Module "../modules/static-site.yaml"
    Properties:
      AppName: !Ref AppName
    Overrides:
      ContentBucket:
        Metadata:
          Rain:
            EmptyOnDelete: true
            Content: site/dist
            Version: 2
            DistributionLogicalId: SiteDistribution
            RunBefore: 
              Command: buildsite.sh
            RunAfter:
              Command: buildsite.sh
              Args:
                - Rain::OutputValue RestApiInvokeURL
                - Rain::OutputValue RedirectURI
                - Rain::OutputValue AppName
                - Rain::OutputValue AppClientId

  Cognito:
    Type: !Rain::Module "../modules/cognito.yaml"
    Properties:
      AppName: !Ref AppName
      CallbackURL: !Sub "https://${SiteDistribution.DomainName}/index.html"
    Overrides:
      UserPool:
        DependsOn: SiteDistribution

  Rest:
    Type: !Rain::Module "../modules/rest-api.yaml"
    Properties:
      AppName: !Ref AppName
      UserPoolArn: !GetAtt CognitoUserPool.Arn
    Overrides:
      ApiDeployment:
        Metadata:
          Version: 2
        DependsOn:
          - TestResourceGet
          - TestResourceOptions
          - JwtResourceGet
          - JwtResourceOptions

  TestResource:
    Type: !Rain::Module "../modules/api-resource.yaml"
    Metadata:
      Comment: This module handles all methods on the /test path on the API. The lambda function code is located in api/resources/test.  
    Properties:
      Name: !Sub ${AppName}-test
      RestApi: !Ref RestApi
      RestApiDeployment: !Ref RestApiDeployment
      BuildScript: ../webapp/buildapi.sh
      CodePath: ../webapp/api/dist/test/lambda-handler.zip
      ResourcePath: test
      StageName: staging
      AuthorizerId: !Ref RestApiAuthorizer
    Overrides:
      Handler:
        Properties:
          Environment:
            Variables:
              TABLE_NAME: !Ref TestTable

  TestResourceHandlerPolicy:
    Type: AWS::IAM::RolePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - dynamodb:BatchGetItem
              - dynamodb:GetItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:BatchWriteItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
            Effect: Allow
            Resource: 
              - !GetAtt TestTable.Arn
      PolicyName: handler-policy
      RoleName: !Ref TestResourceHandlerRole

  TestTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      TableName: !Sub ${AppName}-test
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  JwtResource:
    Type: !Rain::Module "../modules/api-resource.yaml"
    Metadata:
      Comment: This module handles all methods on the /jwt path on the API. The lambda function code is located in api/resources/jwt
    Properties:
      Name: !Sub ${AppName}-jwt
      RestApi: !Ref RestApi
      RestApiDeployment: !Ref RestApiDeployment
      BuildScript: ../webapp/buildapi.sh
      CodePath: ../webapp/api/dist/jwt/lambda-handler.zip
      ResourcePath: jwt
      StageName: staging
      AuthorizerId: AWS::NoValue
    Overrides:
      Handler:
        Properties:
          Environment:
            Variables:
              COGNITO_REGION: us-east-1
              COGNITO_POOL_ID: us-east-1_OkBy88ce5
              COGNITO_REDIRECT_URI: https://d3g1i2gq31u5lh.cloudfront.net/index.html 
              COGNITO_DOMAIN_PREFIX: rain-webapp-manual-test1
              COGNITO_APP_CLIENT_ID: 77p10r3qjrjeou9rvncrc1q33a
      Get:
        Properties:
          AuthorizationType: NONE

Outputs:

  SiteURL:
    Value: !Sub "https://${SiteDistribution.DomainName}"

  RedirectURI:
    Value: !Sub "https://${SiteDistribution.DomainName}/index.html"

  AppName:
    Value: !Ref AppName

  RestApiInvokeURL:
    Value: !Sub https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${RestApiStage}

  AppClientId:
    Value: !Ref CognitoClient

  CognitoDomainPrefix:
    Value: !Ref AppName

